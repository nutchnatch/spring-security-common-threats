Http Firewall - StrictHttpFierewall.class
		- before filter, the is an http firewall
			+ it is an interface and two implementations:
				- StrictHttpFirewall (used by default by spring)
					+ forces a white list of http methods
					+ provides protections agains http verb tampering and cross site trace attacks (methos like CONNECT and TRACE are blocked by default)
					+ protects against URL tampering
						- blocks percentage, encoded, semicolons, url enconded period
						- enforces tht only printable characters are allowed in the request urls
							 + prevent unicode charater changing (a character which looks an 'a', but it is not)

						@Bean
						public HttpFirewall firewall() {
							StrictHttpFirewall firewall = new StrictHttpFirewall()
							return firewall;
						}

				- DefaultHttpFirewall



	HTTPS - how to anable
		- in the internet our requests don't go directly from the browser to our app
			+ it goes through many server in the web
			+ anyone checking snooping traffic could intercept the authentication request and steel user credentials
			+ or hijack user session and impersonate them
			+ sensitive date may be exposed
			+ there is no way to confirm, the destination server is who they claim to be
				- exposing to man in the middle attack
			+ so encryption is required to provide confidentuality
			+ how to autenticate the identity of the peer
			-> use htttps (http over TSL - transport layer security)

			- when accessing a site, verify if the client received a certification
				+ check if the certificate is issued to the site owner
				+ check if it is issued by a trusted CA

		- generate certificate and anable https
			+ inproduction, use a certificate generated by a CA
			+ easiest way:
				- use java keytool -genkey command
				- add this generated  file to application.properties
					server:
						port: 8443
						ssl:
							key-store-password
							key-store
							key-store-type
							key-alias
						note: vulnaribility -  those information is in plain text (save those info to nexus)
		- since it is a self ceritificate and it is not generated by a CA,
			+ browser complains and warns the user, they cannot verify the server is who they say they are
		- if user access app with http, we need to redirect it to https
			+ go to ServletWebServerFactory servletContainer() and exposes like a bean, so spring uses it to creates the embeded tomcat server
			+ overrides postProccessContext()
			+ add CONFIDENTIAL to  "/*" - means we want https for everything
			+ add redirectConnector()
				- listen on port 80 - http
				- redirects to 443 - https
		- the initial request and the response is in http, and it is vulneable to MITM attack
			- haker can intercept the response, inject milicious content like script, or change the redirect to their malicious site by changing the header
				+ ex:  melicious wifi hotspot with mascared data
					- they use the dns server of the device
					- maps usual sites to malicious ip
					- if user tries to use thar site, they will end up in the malicious login page without https
					- Spring prevents this adding HSTS to the header

		 Header HSTS -  inform the browser, your site requires https
		 	- User browser caches this information and and all future subsequent request will be done by default with https by thr browser, even if the user specifies http
		 	- it requires a valid certificate issued by a Certificate Authority
		 	- how to get a valid certificate for free:
		 		+ letsencrypt.org
		 		+ clone the code of a small web server that communicates with letsencrypt
		 		+ it then generates new keys
		 		+ pre-requirements:
		 			80 port is open
		 			python 2.7 is installed
		 			website: https://letsencrypt.org
		 		- to secure kasiaphotos.com
		 			git clone https://github.com/certbot/certbot
		 			./certbot-auto certonly -a standalone -d  yourdomain.com

		 			+ use OpenSSl to convert between those two formats:
		 				openssl pkcs12 -export -in fulchain.pem \
		 					-inkey privkey.pem \
		 					-out keystore.p12
		 					-name tomcat \
		 					-CAfile chain.pem \
		 					-cname root
		 			+ update application properties with new keystore
		 			+ cert is valid for 90 days
		 			+ to renew it run the command:
		 				./certbot-auto renew
		 			+ from now on, hsts is accepted by the browser
		 			+ so the request is not even sent in http, it automaticaly redirects it to https
		 			+ the very first access to site is still vurnerable
		 				- add your domain to browser's preladed host list (most browser supports it)
		 					-> hstspreloaded.org

		 To logout:
		 	+ on configure(HttpSecurity http)
		 		- .logout().logoutUrl("/api/logout")