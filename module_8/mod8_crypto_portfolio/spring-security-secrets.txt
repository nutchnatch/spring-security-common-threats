Application Secrets (database, https, api):
		- to encrypt secret data
			+ dowload jaspy distribution
			+ from bin dor, run:
				- encrypt.bat input="passsword" password=sfdsfsdfs (pass to use later for decryption) -> will generate an ecnrypted code (shdgdgrhsdwyywu)
				- add jasypt-spring-boot-starter dependency
				- in properties, update keystore password:
					+ server:
						port: 8443
						ssl:
							key-store-password: ENC(shdgdgrhsdwyywu)
					jasypt:
						encryptor:
							password: ${JASYP_ENCRYPTOR_PASSWORD}
							iv-generator-classname: org.jasyp.iv.NoIvGenerator
							algorithm: PBEWithMD5AndTrippleDES

			+ Secret Management:
				- secrets must be rotated frequently
				- secreta must be audited:
					+ secrets are accessed by who / when / and why ?
				- centralize secret locations.
					+ provide fine-grained access to secrets
				- all those features can be provided by spring vault

	Authentication and Authorization exceptions:
		- create a class, let's say:
			AuthenticationFailureHandlerImpl implements AuthenticationFailureHandler {

				onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response) {


				}
			}

			+ on configure(HttpSecurity http) {
				http
						.authorizeRequests()
							.mvcMatchers("/loggin", "logout").permitAll()
						.formLogin()
							.loginPage("/login")
							.failureLiogin(newAuthenticationFailureHandlerImpl()
							.defaultSuccessUrl("/portfolio")
			}

			+ access denied handler can also be created
				- AccessDeniedHandlerImpl implements AccessDeniedHandler {

				}
				- on configure(HttpSecurity http) {
					http
						.exceptionHandling()
							.accessDeniedPage("access_denied")
							.accessDeniedHandler(new AccessDeniedHandlerImpl)
						.and()
			}

	Application Exceptions (injection attack):
		- in case of sql injection, use a prepare statement ir spring crud repository